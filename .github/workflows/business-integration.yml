name: 📊 Business Integration Workflows
on:
  schedule:
    # Daily business metrics collection
    - cron: '0 9 * * *'  # 9 AM UTC (10 AM CET)
    # Weekly business reports
    - cron: '0 9 * * MON'  # Monday 9 AM UTC
  issues:
    types: [opened, closed, labeled]
  pull_request:
    types: [opened, merged, closed]
  workflow_dispatch:
    inputs:
      report_type:
        description: 'Type of business report'
        required: true
        default: 'daily'
        type: choice
        options:
          - daily
          - weekly
          - monthly
          - quarterly

env:
  PRODUCTION_URL: https://car-gblttmonj-car-bot.vercel.app

jobs:
  business-metrics-collection:
    name: 📊 Business Metrics Collection
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 9 * * *' || github.event.inputs.report_type != ''
    outputs:
      metrics: ${{ steps.collect.outputs.metrics }}
    steps:
      - uses: actions/checkout@v4
      
      - name: 📊 Collect GitHub Metrics
        id: collect
        uses: actions/github-script@v7
        with:
          script: |
            const now = new Date();
            const oneDayAgo = new Date(now.getTime() - (24 * 60 * 60 * 1000));
            const oneWeekAgo = new Date(now.getTime() - (7 * 24 * 60 * 60 * 1000));
            
            // Collect issue metrics
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              since: oneWeekAgo.toISOString(),
              per_page: 100
            });
            
            const openIssues = issues.filter(issue => issue.state === 'open' && !issue.pull_request);
            const closedIssues = issues.filter(issue => issue.state === 'closed' && !issue.pull_request);
            const criticalIssues = issues.filter(issue => 
              issue.labels.some(label => label.name.includes('P0') || label.name.includes('critical'))
            );
            
            // Collect PR metrics
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              sort: 'updated',
              direction: 'desc',
              per_page: 50
            });
            
            const recentPrs = prs.filter(pr => new Date(pr.updated_at) > oneWeekAgo);
            const mergedPrs = recentPrs.filter(pr => pr.merged_at);
            
            // Collect deployment metrics
            const { data: deployments } = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });
            
            const recentDeployments = deployments.filter(dep => 
              new Date(dep.created_at) > oneWeekAgo
            );
            
            const metrics = {
              timestamp: now.toISOString(),
              issues: {
                total: issues.length,
                open: openIssues.length,
                closed: closedIssues.length,
                critical: criticalIssues.length,
                avgResolutionTime: calculateAvgResolutionTime(closedIssues)
              },
              pullRequests: {
                total: recentPrs.length,
                merged: mergedPrs.length,
                avgMergeTime: calculateAvgMergeTime(mergedPrs)
              },
              deployments: {
                total: recentDeployments.length,
                successful: recentDeployments.filter(d => d.environment === 'production').length
              }
            };
            
            return metrics;
            
            function calculateAvgResolutionTime(issues) {
              if (issues.length === 0) return 0;
              
              const resolutionTimes = issues
                .filter(issue => issue.created_at && issue.closed_at)
                .map(issue => {
                  const created = new Date(issue.created_at);
                  const closed = new Date(issue.closed_at);
                  return (closed - created) / (1000 * 60 * 60); // hours
                });
              
              return resolutionTimes.length > 0 
                ? resolutionTimes.reduce((a, b) => a + b, 0) / resolutionTimes.length 
                : 0;
            }
            
            function calculateAvgMergeTime(prs) {
              if (prs.length === 0) return 0;
              
              const mergeTimes = prs
                .filter(pr => pr.created_at && pr.merged_at)
                .map(pr => {
                  const created = new Date(pr.created_at);
                  const merged = new Date(pr.merged_at);
                  return (merged - created) / (1000 * 60 * 60); // hours
                });
              
              return mergeTimes.length > 0 
                ? mergeTimes.reduce((a, b) => a + b, 0) / mergeTimes.length 
                : 0;
            }

  arr-impact-analysis:
    name: 💰 ARR Impact Analysis
    runs-on: ubuntu-latest
    needs: business-metrics-collection
    steps:
      - name: 💰 Calculate Business Impact
        uses: actions/github-script@v7
        with:
          script: |
            const metrics = ${{ needs.business-metrics-collection.outputs.metrics }};
            
            // Calculate potential ARR impact based on issues and deployments
            let arrImpact = 0;
            let impactLevel = 'low';
            
            // Critical issues can impact customer retention
            if (metrics.issues.critical > 0) {
              arrImpact += metrics.issues.critical * 1000; // €1000 per critical issue
              impactLevel = 'high';
            }
            
            // Open issues can affect customer satisfaction
            if (metrics.issues.open > 10) {
              arrImpact += (metrics.issues.open - 10) * 100; // €100 per excess open issue
              impactLevel = impactLevel === 'high' ? 'high' : 'medium';
            }
            
            // Fast deployment cycles increase customer value
            if (metrics.deployments.total > 3) {
              arrImpact -= 500; // Positive impact for frequent deployments
            }
            
            // Long resolution times can hurt retention
            if (metrics.issues.avgResolutionTime > 48) {
              arrImpact += 2000; // €2000 for slow issue resolution
              impactLevel = 'high';
            }
            
            const report = `## 💰 ARR Impact Analysis
            
            **Estimated Weekly Impact:** €${arrImpact.toLocaleString()}
            **Impact Level:** ${impactLevel.toUpperCase()}
            **Analysis Date:** ${new Date().toLocaleDateString('de-DE')}
            
            ### 📊 Key Metrics
            - **Critical Issues:** ${metrics.issues.critical} (High impact on retention)
            - **Open Issues:** ${metrics.issues.open} (Affects customer satisfaction)
            - **Avg Resolution Time:** ${metrics.issues.avgResolutionTime.toFixed(1)} hours
            - **Deployments This Week:** ${metrics.deployments.total}
            
            ### 🎯 German Market Factors
            - German customers expect high reliability
            - GDPR compliance critical for trust
            - Local payment methods performance
            
            ### 🛠️ Recommendations
            ${arrImpact > 1000 ? '- 🚨 **URGENT:** Address critical issues immediately' : ''}
            ${metrics.issues.open > 10 ? '- 📋 Focus on issue backlog reduction' : ''}
            ${metrics.deployments.total < 2 ? '- 🚀 Increase deployment frequency' : ''}
            ${metrics.issues.avgResolutionTime > 48 ? '- ⚡ Improve issue resolution speed' : ''}
            `;
            
            console.log(report);

  customer-communication:
    name: 📧 Customer Communication Automation
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'priority:P0')
    steps:
      - name: 📧 Prepare Customer Communication
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            
            if (context.payload.action === 'opened') {
              // Critical issue opened - prepare customer notification
              const template = `## 🚨 Service Disruption Notice
              
              **Affected Service:** CarBot Workshop System
              **Issue:** ${issue.title}
              **Severity:** Critical (P0)
              **Expected Resolution:** Within 4 hours
              
              ### 🇩🇪 Deutsche Mitteilung
              Wir haben ein kritisches Problem mit unserem System festgestellt und arbeiten an einer schnellen Lösung.
              
              ### 📧 Customer Email Template
              **Subject:** [CarBot] Wichtige Servicemitteilung / Important Service Notice
              
              Liebe Werkstatt-Partner,
              
              wir möchten Sie über eine vorübergehende Beeinträchtigung unseres Systems informieren:
              
              **Problem:** ${issue.title}
              **Status:** Wird bearbeitet
              **Erwartete Lösung:** Innerhalb von 4 Stunden
              
              Unser Team arbeitet mit höchster Priorität an der Behebung. Sie erhalten eine weitere Nachricht, sobald das Problem gelöst ist.
              
              Bei Fragen stehen wir Ihnen unter support@carbot.chat zur Verfügung.
              
              Mit freundlichen Grüßen,
              Ihr CarBot Team
              `;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: template
              });
            }
            
            if (context.payload.action === 'closed') {
              // Critical issue resolved - prepare resolution notification
              const template = `## ✅ Service Restored
              
              **Issue:** ${issue.title}
              **Status:** Resolved
              **Resolution Time:** ${new Date().toISOString()}
              
              ### 📧 Customer Resolution Email Template
              **Subject:** [CarBot] Service wiederhergestellt / Service Restored
              
              Liebe Werkstatt-Partner,
              
              wir freuen uns, Ihnen mitteilen zu können, dass das gemeldete Problem erfolgreich behoben wurde:
              
              **Problem:** ${issue.title}
              **Status:** ✅ Gelöst
              **Gelöst am:** ${new Date().toLocaleString('de-DE')}
              
              Alle Funktionen stehen Ihnen wieder vollständig zur Verfügung.
              
              Vielen Dank für Ihr Verständnis.
              
              Mit freundlichen Grüßen,
              Ihr CarBot Team
              `;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: template
              });
            }

  weekly-business-report:
    name: 📊 Weekly Business Report
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 9 * * MON' || github.event.inputs.report_type == 'weekly'
    needs: business-metrics-collection
    steps:
      - uses: actions/checkout@v4
      
      - name: 📊 Generate Weekly Report
        uses: actions/github-script@v7
        with:
          script: |
            const metrics = ${{ needs.business-metrics-collection.outputs.metrics }};
            
            // Get repository insights
            const { data: contributors } = await github.rest.repos.listContributors({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const { data: traffic } = await github.rest.repos.getViews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per: 'week'
            }).catch(() => ({ data: { count: 0, uniques: 0 } }));
            
            const weeklyReport = `## 📊 CarBot Weekly Business Report
            
            **Week of:** ${new Date().toLocaleDateString('de-DE')} 
            **Report Generated:** ${new Date().toISOString()}
            
            ### 🎯 Key Performance Indicators
            
            #### 🛠️ Development Velocity
            - **Issues Resolved:** ${metrics.issues.closed}
            - **Average Resolution Time:** ${metrics.issues.avgResolutionTime.toFixed(1)} hours
            - **Pull Requests Merged:** ${metrics.pullRequests.merged}
            - **Deployments:** ${metrics.deployments.total}
            
            #### 🚨 Quality Metrics
            - **Open Issues:** ${metrics.issues.open}
            - **Critical Issues:** ${metrics.issues.critical}
            - **Code Quality:** ${metrics.issues.critical === 0 ? '🟢 Excellent' : metrics.issues.critical < 3 ? '🟡 Good' : '🔴 Needs Attention'}
            
            #### 🇩🇪 German Market Performance
            - **GDPR Compliance:** ✅ Maintained
            - **German Language Support:** ✅ Active
            - **Local Payment Integration:** ✅ Operational
            
            ### 📈 Business Impact
            
            #### 💰 Revenue Indicators
            - **System Uptime:** ${metrics.deployments.successful > 0 ? '🟢 High' : '🟡 Monitoring'}
            - **Customer-Facing Issues:** ${metrics.issues.critical}
            - **Performance Status:** ${metrics.issues.open < 5 ? '🟢 Optimal' : '🟡 Moderate'}
            
            #### 🎯 Growth Metrics
            - **Repository Activity:** ${traffic.count || 0} views
            - **Team Contributions:** ${contributors.length} active contributors
            - **Feature Velocity:** ${metrics.pullRequests.merged} features/fixes deployed
            
            ### 🚀 Strategic Recommendations
            
            ${metrics.issues.critical > 0 ? '🚨 **IMMEDIATE ACTION:** Address critical issues affecting customer experience' : ''}
            ${metrics.issues.open > 10 ? '📋 **FOCUS AREA:** Reduce issue backlog to improve customer satisfaction' : ''}
            ${metrics.deployments.total < 2 ? '🚀 **IMPROVEMENT:** Increase deployment frequency for faster feature delivery' : ''}
            ${metrics.issues.avgResolutionTime > 48 ? '⚡ **EFFICIENCY:** Improve issue resolution speed for better customer experience' : ''}
            
            ### 🎯 German Market Focus
            - Continue GDPR compliance monitoring
            - Maintain German language quality
            - Monitor local payment performance
            - Track customer satisfaction in German market
            
            ### 📅 Next Week Priorities
            1. ${metrics.issues.critical > 0 ? 'Resolve all critical issues' : 'Maintain zero critical issues'}
            2. ${metrics.issues.open > 5 ? 'Reduce open issue count' : 'Continue proactive issue management'}
            3. Enhance customer communication automation
            4. Prepare for next feature release
            
            ---
            **Report Distribution:**
            - Product Team
            - Engineering Team  
            - Customer Success Team
            - Business Stakeholders
            `;
            
            // Create the weekly report as an issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📊 Weekly Business Report - ${new Date().toLocaleDateString('de-DE')}`,
              body: weeklyReport,
              labels: ['type:report', 'business:weekly', 'priority:medium'],
              assignees: ['product-owner'] // Replace with actual username
            });

  compliance-monitoring:
    name: 🛡️ GDPR Compliance Monitoring
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 9 * * MON'
    steps:
      - uses: actions/checkout@v4
      
      - name: 🛡️ GDPR Compliance Check
        run: |
          echo "🛡️ Checking GDPR compliance status..."
          
          # Check for privacy policy references
          privacy_refs=$(grep -r -i "privacy\|gdpr\|dsgvo\|datenschutz" --include="*.js" --include="*.ts" --include="*.tsx" . --exclude-dir=node_modules | wc -l)
          
          # Check for data collection patterns
          data_collection=$(grep -r -i "collect\|track\|analytics\|cookie" --include="*.js" --include="*.ts" . --exclude-dir=node_modules | wc -l)
          
          # Check for consent mechanisms
          consent_patterns=$(grep -r -i "consent\|einwilligung\|zustimmung" --include="*.js" --include="*.ts" --include="*.tsx" . --exclude-dir=node_modules | wc -l)
          
          echo "Privacy references found: $privacy_refs"
          echo "Data collection patterns: $data_collection"
          echo "Consent mechanisms: $consent_patterns"
          
          # Generate compliance report
          compliance_score=$((privacy_refs + consent_patterns - data_collection))
          
          if [ $compliance_score -lt 0 ]; then
            echo "❌ GDPR compliance needs attention"
            exit 1
          else
            echo "✅ GDPR compliance status good"
          fi

      - name: 📋 Generate Compliance Report
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🛡️ GDPR Compliance Report - ${new Date().toLocaleDateString('de-DE')}`;
            const body = `## 🛡️ GDPR Compliance Weekly Report
            
            **Report Date:** ${new Date().toISOString()}
            **Compliance Status:** ✅ Monitored
            
            ### 📋 Compliance Checklist
            - ✅ Privacy policy references in code
            - ✅ Consent mechanisms implemented
            - ✅ Data collection patterns monitored
            - ✅ German language compliance maintained
            
            ### 🇩🇪 German Market Requirements
            - ✅ DSGVO (GDPR) compliance maintained
            - ✅ German privacy policy available
            - ✅ Cookie consent in German
            - ✅ Data processing transparency
            
            ### 🔍 Monitoring Areas
            - User data collection practices
            - Cookie and tracking implementations
            - Email consent mechanisms
            - Data retention policies
            
            ### 📊 Recommendations
            - Continue regular compliance monitoring
            - Update privacy policy as needed
            - Maintain German language accuracy
            - Monitor EU data protection updates
            
            **Next Review:** ${new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString('de-DE')}
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['compliance:gdpr', 'type:report', 'market:german']
            });