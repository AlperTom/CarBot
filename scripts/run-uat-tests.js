#!/usr/bin/env node\n\n/**\n * UAT Test Execution Script\n * Orchestrates comprehensive UAT testing with reporting\n */\n\nconst { execSync, spawn } = require('child_process');\nconst fs = require('fs').promises;\nconst path = require('path');\n\nclass UATTestRunner {\n  constructor(options = {}) {\n    this.options = {\n      environment: options.environment || 'uat',\n      baseURL: options.baseURL || process.env.UAT_BASE_URL || 'https://carbot-uat.vercel.app',\n      browser: options.browser || 'chromium',\n      workers: options.workers || 3,\n      timeout: options.timeout || 60000,\n      retries: options.retries || 2,\n      reporter: options.reporter || 'html,json',\n      headed: options.headed || false,\n      debug: options.debug || false,\n      ...options\n    };\n    \n    this.testSuites = [\n      {\n        name: 'MVP Critical Path',\n        file: 'uat-comprehensive.spec.js',\n        priority: 'critical',\n        timeout: 180000 // 3 minutes per test\n      },\n      {\n        name: 'Payment Flow',\n        file: 'payment-flow-uat.spec.js',\n        priority: 'critical',\n        timeout: 120000 // 2 minutes per test\n      },\n      {\n        name: 'Multi-language Support',\n        file: 'multi-language.spec.js',\n        priority: 'high',\n        timeout: 90000\n      },\n      {\n        name: 'Performance Validation',\n        file: 'performance.spec.js',\n        priority: 'medium',\n        timeout: 300000 // 5 minutes for performance tests\n      },\n      {\n        name: 'Security Compliance',\n        file: 'security.spec.js',\n        priority: 'high',\n        timeout: 120000\n      }\n    ];\n    \n    this.results = {\n      startTime: new Date(),\n      endTime: null,\n      totalDuration: 0,\n      suites: [],\n      summary: {\n        total: 0,\n        passed: 0,\n        failed: 0,\n        skipped: 0,\n        flaky: 0\n      },\n      performance: {\n        slowest: [],\n        failed: [],\n        memory: []\n      },\n      errors: []\n    };\n  }\n\n  async run() {\n    console.log('🎯 Starting Comprehensive UAT Test Execution');\n    console.log(`🌐 Target: ${this.options.baseURL}`);\n    console.log(`🖥️  Browser: ${this.options.browser}`);\n    console.log(`👥 Workers: ${this.options.workers}`);\n    console.log(`🕐 Started: ${this.results.startTime.toISOString()}`);\n    console.log('='.repeat(70));\n    \n    try {\n      // Pre-test validation\n      await this.validateEnvironment();\n      \n      // Setup test environment\n      await this.setupTestEnvironment();\n      \n      // Execute test suites\n      for (const suite of this.testSuites) {\n        await this.runTestSuite(suite);\n      }\n      \n      // Generate comprehensive report\n      await this.generateFinalReport();\n      \n      console.log('\\n✅ UAT Testing completed successfully!');\n      \n    } catch (error) {\n      console.error('💥 UAT Testing failed:', error.message);\n      this.results.errors.push({ phase: 'execution', error: error.message });\n      throw error;\n    } finally {\n      this.results.endTime = new Date();\n      this.results.totalDuration = this.results.endTime - this.results.startTime;\n      \n      // Cleanup\n      await this.cleanup();\n    }\n  }\n\n  async validateEnvironment() {\n    console.log('\\n🔍 Validating UAT environment...');\n    \n    // Check if UAT environment is accessible\n    try {\n      const fetch = await import('node-fetch');\n      const response = await fetch.default(this.options.baseURL, { \n        timeout: 10000,\n        headers: { 'User-Agent': 'UAT-Test-Runner/2.0' }\n      });\n      \n      console.log(`   Environment status: ${response.status}`);\n      \n      if (response.status === 401) {\n        console.log('   ⚠️  Environment is password protected');\n        console.log('   💡 Remove password protection or provide credentials');\n      }\n    } catch (error) {\n      throw new Error(`UAT environment not accessible: ${error.message}`);\n    }\n    \n    // Check Playwright installation\n    try {\n      execSync('npx playwright --version', { stdio: 'ignore' });\n      console.log('   ✅ Playwright available');\n    } catch {\n      console.log('   📦 Installing Playwright...');\n      execSync('npx playwright install', { stdio: 'inherit' });\n    }\n    \n    // Verify test files exist\n    for (const suite of this.testSuites) {\n      const testPath = path.join('tests', 'e2e', 'specs', suite.file);\n      try {\n        await fs.access(testPath);\n        console.log(`   ✅ ${suite.name} test file found`);\n      } catch {\n        console.log(`   ⚠️  ${suite.name} test file missing: ${testPath}`);\n      }\n    }\n  }\n\n  async setupTestEnvironment() {\n    console.log('\\n🔧 Setting up test environment...');\n    \n    // Create test artifacts directories\n    const dirs = [\n      'test-artifacts/screenshots',\n      'test-artifacts/videos',\n      'test-artifacts/traces',\n      'test-artifacts/reports',\n      'test-results'\n    ];\n    \n    for (const dir of dirs) {\n      await fs.mkdir(dir, { recursive: true });\n    }\n    \n    // Generate Playwright config for UAT\n    const playwrightConfig = this.generatePlaywrightConfig();\n    await fs.writeFile('playwright.uat.config.js', playwrightConfig);\n    \n    console.log('   ✅ Test environment prepared');\n  }\n\n  generatePlaywrightConfig() {\n    return `// Auto-generated Playwright config for UAT testing\nconst { defineConfig, devices } = require('@playwright/test');\n\nmodule.exports = defineConfig({\n  testDir: './tests/e2e',\n  fullyParallel: true,\n  forbidOnly: !!process.env.CI,\n  retries: ${this.options.retries},\n  workers: ${this.options.workers},\n  timeout: ${this.options.timeout},\n  \n  reporter: [\n    ['html', { outputDir: 'test-artifacts/reports/html' }],\n    ['json', { outputFile: 'test-artifacts/reports/uat-results.json' }],\n    ['junit', { outputFile: 'test-artifacts/reports/uat-results.xml' }],\n    ['line']\n  ],\n  \n  use: {\n    baseURL: '${this.options.baseURL}',\n    trace: 'retain-on-failure',\n    screenshot: 'only-on-failure',\n    video: 'retain-on-failure',\n    actionTimeout: 15000,\n    navigationTimeout: 30000,\n    ignoreHTTPSErrors: true,\n    extraHTTPHeaders: {\n      'X-UAT-Test': 'true',\n      'X-Test-Session': new Date().toISOString()\n    }\n  },\n  \n  projects: [\n    {\n      name: 'chromium-desktop',\n      use: {\n        ...devices['Desktop Chrome'],\n        locale: 'de-DE',\n        timezoneId: 'Europe/Berlin'\n      }\n    },\n    {\n      name: 'mobile-chrome',\n      use: {\n        ...devices['Pixel 5'],\n        locale: 'de-DE',\n        timezoneId: 'Europe/Berlin'\n      }\n    },\n    {\n      name: 'multi-browser',\n      use: {\n        ...devices['Desktop Firefox'],\n        locale: 'de-DE',\n        timezoneId: 'Europe/Berlin'\n      }\n    }\n  ],\n  \n  expect: {\n    timeout: 10000\n  },\n  \n  globalSetup: require.resolve('./tests/e2e/setup/global-setup.js'),\n  globalTeardown: require.resolve('./tests/e2e/setup/global-teardown.js')\n});\n`;\n  }\n\n  async runTestSuite(suite) {\n    console.log(`\\n🧪 Running: ${suite.name}`);\n    console.log(`   Priority: ${suite.priority}`);\n    console.log(`   File: ${suite.file}`);\n    console.log(`   Timeout: ${suite.timeout}ms`);\n    \n    const suiteResult = {\n      name: suite.name,\n      file: suite.file,\n      priority: suite.priority,\n      startTime: new Date(),\n      endTime: null,\n      duration: 0,\n      tests: [],\n      status: 'running',\n      performance: []\n    };\n    \n    try {\n      const playwrightArgs = [\n        'test',\n        `tests/e2e/specs/${suite.file}`,\n        '--config=playwright.uat.config.js',\n        `--timeout=${suite.timeout}`,\n        `--project=${this.getProjectForSuite(suite)}`,\n        this.options.headed ? '--headed' : '',\n        this.options.debug ? '--debug' : '',\n        '--reporter=line'\n      ].filter(arg => arg);\n      \n      const startTime = Date.now();\n      \n      const result = await this.executePlaywright(playwrightArgs);\n      \n      suiteResult.duration = Date.now() - startTime;\n      suiteResult.endTime = new Date();\n      suiteResult.status = result.success ? 'passed' : 'failed';\n      suiteResult.output = result.output;\n      suiteResult.tests = this.parseTestResults(result.output);\n      \n      // Update overall statistics\n      this.updateStatistics(suiteResult);\n      \n      console.log(`   ${result.success ? '✅' : '❌'} ${suite.name}: ${suiteResult.status}`);\n      console.log(`   Duration: ${Math.round(suiteResult.duration / 1000)}s`);\n      console.log(`   Tests: ${suiteResult.tests.length}`);\n      \n    } catch (error) {\n      suiteResult.status = 'failed';\n      suiteResult.error = error.message;\n      suiteResult.endTime = new Date();\n      suiteResult.duration = suiteResult.endTime - suiteResult.startTime;\n      \n      console.log(`   ❌ ${suite.name}: FAILED - ${error.message}`);\n    }\n    \n    this.results.suites.push(suiteResult);\n  }\n\n  getProjectForSuite(suite) {\n    // Assign different projects based on test type\n    switch (suite.priority) {\n      case 'critical':\n        return 'chromium-desktop';\n      case 'high':\n        return 'multi-browser';\n      case 'medium':\n        return 'mobile-chrome';\n      default:\n        return 'chromium-desktop';\n    }\n  }\n\n  async executePlaywright(args) {\n    return new Promise((resolve, reject) => {\n      const process = spawn('npx', ['playwright', ...args], {\n        stdio: ['inherit', 'pipe', 'pipe']\n      });\n      \n      let output = '';\n      let error = '';\n      \n      process.stdout.on('data', (data) => {\n        const text = data.toString();\n        output += text;\n        if (this.options.debug) {\n          console.log(text);\n        }\n      });\n      \n      process.stderr.on('data', (data) => {\n        const text = data.toString();\n        error += text;\n        if (this.options.debug) {\n          console.error(text);\n        }\n      });\n      \n      process.on('close', (code) => {\n        resolve({\n          success: code === 0,\n          output: output,\n          error: error,\n          exitCode: code\n        });\n      });\n      \n      process.on('error', (err) => {\n        reject(new Error(`Failed to execute Playwright: ${err.message}`));\n      });\n      \n      // Set timeout for individual test suites\n      setTimeout(() => {\n        process.kill('SIGKILL');\n        reject(new Error('Test suite timed out'));\n      }, 600000); // 10 minutes max per suite\n    });\n  }\n\n  parseTestResults(output) {\n    // Parse Playwright output to extract test results\n    const tests = [];\n    const lines = output.split('\\n');\n    \n    for (const line of lines) {\n      // Look for test result patterns\n      const testMatch = line.match(/\\s*(✅|❌|⏸️)\\s*(.+?)\\s*\\(([0-9.]+s)\\)/);\n      if (testMatch) {\n        tests.push({\n          status: testMatch[1] === '✅' ? 'passed' : testMatch[1] === '❌' ? 'failed' : 'skipped',\n          name: testMatch[2].trim(),\n          duration: parseFloat(testMatch[3]) * 1000 // Convert to ms\n        });\n      }\n    }\n    \n    return tests;\n  }\n\n  updateStatistics(suiteResult) {\n    suiteResult.tests.forEach(test => {\n      this.results.summary.total++;\n      \n      switch (test.status) {\n        case 'passed':\n          this.results.summary.passed++;\n          break;\n        case 'failed':\n          this.results.summary.failed++;\n          this.results.performance.failed.push({\n            suite: suiteResult.name,\n            test: test.name,\n            duration: test.duration\n          });\n          break;\n        case 'skipped':\n          this.results.summary.skipped++;\n          break;\n      }\n      \n      // Track slow tests\n      if (test.duration > 30000) { // Slower than 30 seconds\n        this.results.performance.slowest.push({\n          suite: suiteResult.name,\n          test: test.name,\n          duration: test.duration\n        });\n      }\n    });\n  }\n\n  async generateFinalReport() {\n    console.log('\\n📊 Generating comprehensive UAT report...');\n    \n    const report = {\n      timestamp: new Date().toISOString(),\n      environment: {\n        baseURL: this.options.baseURL,\n        browser: this.options.browser,\n        workers: this.options.workers\n      },\n      execution: {\n        startTime: this.results.startTime.toISOString(),\n        endTime: this.results.endTime.toISOString(),\n        totalDuration: this.results.totalDuration,\n        suites: this.results.suites.length\n      },\n      summary: this.results.summary,\n      suites: this.results.suites.map(suite => ({\n        name: suite.name,\n        priority: suite.priority,\n        status: suite.status,\n        duration: suite.duration,\n        testCount: suite.tests.length,\n        passRate: suite.tests.filter(t => t.status === 'passed').length / suite.tests.length\n      })),\n      performance: {\n        slowestTests: this.results.performance.slowest\n          .sort((a, b) => b.duration - a.duration)\n          .slice(0, 10),\n        failedTests: this.results.performance.failed,\n        averageTestDuration: this.calculateAverageTestDuration()\n      },\n      mvpValidation: this.generateMVPValidationSummary(),\n      productionReadiness: this.assessProductionReadiness(),\n      recommendations: this.generateRecommendations(),\n      artifacts: {\n        screenshots: 'test-artifacts/screenshots/',\n        videos: 'test-artifacts/videos/',\n        traces: 'test-artifacts/traces/',\n        htmlReport: 'test-artifacts/reports/html/index.html',\n        jsonReport: 'test-artifacts/reports/uat-results.json'\n      }\n    };\n    \n    // Write detailed JSON report\n    const reportPath = path.join('test-artifacts', 'reports', 'uat-final-report.json');\n    await fs.writeFile(reportPath, JSON.stringify(report, null, 2));\n    \n    // Write executive summary\n    const summaryPath = path.join('test-artifacts', 'reports', 'uat-executive-summary.md');\n    const executiveSummary = this.generateExecutiveSummary(report);\n    await fs.writeFile(summaryPath, executiveSummary);\n    \n    // Console output\n    console.log('\\n📋 UAT EXECUTION SUMMARY');\n    console.log('='.repeat(50));\n    console.log(`🕐 Total Duration: ${Math.round(report.execution.totalDuration / 1000)}s`);\n    console.log(`📊 Test Results: ${report.summary.passed}/${report.summary.total} passed (${Math.round(report.summary.passed / report.summary.total * 100)}%)`);\n    console.log(`🎯 MVP Validation: ${report.mvpValidation.status}`);\n    console.log(`🚀 Production Ready: ${report.productionReadiness.ready ? 'YES' : 'NO'}`);\n    \n    if (report.performance.failedTests.length > 0) {\n      console.log(`\\n❌ Failed Tests: ${report.performance.failedTests.length}`);\n    }\n    \n    if (report.performance.slowestTests.length > 0) {\n      console.log(`\\n⏱️  Slowest Tests:`);\n      report.performance.slowestTests.slice(0, 3).forEach((test, index) => {\n        console.log(`   ${index + 1}. ${test.test}: ${Math.round(test.duration / 1000)}s`);\n      });\n    }\n    \n    console.log(`\\n📄 Reports Generated:`);\n    console.log(`   - ${reportPath}`);\n    console.log(`   - ${summaryPath}`);\n    \n    return report;\n  }\n\n  calculateAverageTestDuration() {\n    const allTests = this.results.suites.flatMap(suite => suite.tests);\n    if (allTests.length === 0) return 0;\n    \n    const totalDuration = allTests.reduce((sum, test) => sum + (test.duration || 0), 0);\n    return Math.round(totalDuration / allTests.length);\n  }\n\n  generateMVPValidationSummary() {\n    const criticalSuites = this.results.suites.filter(suite => suite.priority === 'critical');\n    const allCriticalPassed = criticalSuites.every(suite => suite.status === 'passed');\n    \n    return {\n      status: allCriticalPassed ? 'VALIDATED' : 'ISSUES_FOUND',\n      criticalPathsPassed: criticalSuites.filter(s => s.status === 'passed').length,\n      totalCriticalPaths: criticalSuites.length,\n      details: {\n        germanWorkshopFlow: criticalSuites.find(s => s.name.includes('MVP Critical'))?.status || 'not_tested',\n        paymentProcessing: criticalSuites.find(s => s.name.includes('Payment'))?.status || 'not_tested',\n        chatbotIntegration: this.results.summary.total > 0 ? 'tested' : 'not_tested'\n      }\n    };\n  }\n\n  assessProductionReadiness() {\n    const passRate = this.results.summary.passed / this.results.summary.total;\n    const criticalSuites = this.results.suites.filter(suite => suite.priority === 'critical');\n    const allCriticalPassed = criticalSuites.every(suite => suite.status === 'passed');\n    const hasSlowTests = this.results.performance.slowest.length > 5;\n    \n    const ready = passRate >= 0.9 && allCriticalPassed && !hasSlowTests;\n    \n    const blockers = [];\n    if (passRate < 0.9) blockers.push('Low pass rate (<90%)');\n    if (!allCriticalPassed) blockers.push('Critical tests failing');\n    if (hasSlowTests) blockers.push('Performance issues detected');\n    \n    return {\n      ready,\n      passRate: Math.round(passRate * 100),\n      criticalTestsStatus: allCriticalPassed ? 'ALL_PASSED' : 'ISSUES_FOUND',\n      performanceStatus: hasSlowTests ? 'ISSUES_FOUND' : 'ACCEPTABLE',\n      blockers\n    };\n  }\n\n  generateRecommendations() {\n    const recommendations = [];\n    const productionReadiness = this.assessProductionReadiness();\n    \n    if (!productionReadiness.ready) {\n      recommendations.push({\n        priority: 'critical',\n        category: 'production_readiness',\n        message: 'System not ready for production deployment',\n        actions: productionReadiness.blockers\n      });\n    }\n    \n    if (this.results.performance.slowest.length > 0) {\n      recommendations.push({\n        priority: 'high',\n        category: 'performance',\n        message: `${this.results.performance.slowest.length} slow tests detected`,\n        actions: ['Optimize slow operations', 'Review performance thresholds', 'Consider caching strategies']\n      });\n    }\n    \n    if (this.results.summary.failed > 0) {\n      recommendations.push({\n        priority: 'high',\n        category: 'reliability',\n        message: `${this.results.summary.failed} tests failed`,\n        actions: ['Fix failing tests', 'Review error logs', 'Improve error handling']\n      });\n    }\n    \n    return recommendations;\n  }\n\n  generateExecutiveSummary(report) {\n    const passRate = Math.round(report.summary.passed / report.summary.total * 100);\n    \n    return `# UAT Executive Summary\n\n**Date:** ${report.timestamp}  \n**Environment:** ${report.environment.baseURL}  \n**Duration:** ${Math.round(report.execution.totalDuration / 60000)} minutes  \n\n## 🎯 MVP Validation Status: ${report.mvpValidation.status}\n\n### Key Metrics\n- **Test Success Rate:** ${passRate}% (${report.summary.passed}/${report.summary.total})\n- **Critical Paths:** ${report.mvpValidation.criticalPathsPassed}/${report.mvpValidation.totalCriticalPaths} passed\n- **Production Ready:** ${report.productionReadiness.ready ? '✅ YES' : '❌ NO'}\n\n### Test Suites Results\n${report.suites.map(suite => \n  `- **${suite.name}** (${suite.priority}): ${suite.status} - ${Math.round(suite.passRate * 100)}% pass rate`\n).join('\\n')}\n\n### Performance Analysis\n- **Average Test Duration:** ${report.performance.averageTestDuration}ms\n- **Slow Tests:** ${report.performance.slowestTests.length}\n- **Failed Tests:** ${report.performance.failedTests.length}\n\n### Production Readiness Assessment\n${report.productionReadiness.blockers.length === 0 \n  ? '✅ **System is ready for production deployment**' \n  : '❌ **Production blockers identified:**\\n' + report.productionReadiness.blockers.map(b => `   - ${b}`).join('\\n')\n}\n\n### Recommendations\n${report.recommendations.map(rec => \n  `#### ${rec.priority.toUpperCase()}: ${rec.category}\\n${rec.message}\\n**Actions:** ${Array.isArray(rec.actions) ? rec.actions.join(', ') : rec.actions}\\n`\n).join('\\n')}\n\n### Next Steps\n${report.productionReadiness.ready \n  ? '1. Proceed with production deployment\\n2. Monitor production metrics\\n3. Prepare rollback plan' \n  : '1. Address production blockers\\n2. Re-run UAT after fixes\\n3. Validate critical paths'\n}\n\n---\n*Report generated by UAT Test Runner v2.0*`;\n  }\n\n  async cleanup() {\n    console.log('\\n🧹 Cleaning up...');\n    \n    try {\n      // Remove temporary config file\n      await fs.unlink('playwright.uat.config.js');\n    } catch (error) {\n      // Ignore cleanup errors\n    }\n  }\n}\n\n// Command line interface\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  const options = {};\n  \n  // Parse command line arguments\n  for (let i = 0; i < args.length; i++) {\n    switch (args[i]) {\n      case '--env':\n      case '--environment':\n        options.environment = args[++i];\n        break;\n      case '--url':\n      case '--base-url':\n        options.baseURL = args[++i];\n        break;\n      case '--browser':\n        options.browser = args[++i];\n        break;\n      case '--workers':\n        options.workers = parseInt(args[++i]);\n        break;\n      case '--headed':\n        options.headed = true;\n        break;\n      case '--debug':\n        options.debug = true;\n        break;\n      case '--timeout':\n        options.timeout = parseInt(args[++i]);\n        break;\n      case '--help':\n        console.log(`\nUAT Test Runner v2.0\n\nUsage: node run-uat-tests.js [options]\n\nOptions:\n  --env <environment>     Environment (uat, staging, prod)\n  --url <url>            Base URL for testing\n  --browser <browser>    Browser (chromium, firefox, webkit)\n  --workers <number>     Number of parallel workers\n  --headed              Run tests in headed mode\n  --debug               Enable debug output\n  --timeout <ms>        Test timeout in milliseconds\n  --help                Show this help\n\nExamples:\n  node run-uat-tests.js --env uat --headed\n  node run-uat-tests.js --url https://carbot-uat.vercel.app --workers 2\n`);\n        process.exit(0);\n    }\n  }\n  \n  const runner = new UATTestRunner(options);\n  runner.run()\n    .then(() => {\n      console.log('\\n🎉 UAT Testing completed successfully!');\n      process.exit(0);\n    })\n    .catch(error => {\n      console.error('💥 UAT Testing failed:', error.message);\n      process.exit(1);\n    });\n}\n\nmodule.exports = { UATTestRunner };\n"